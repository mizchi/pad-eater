// Generated by CoffeeScript 1.8.0
(function() {
  var PadEater;

  PadEater = (function() {
    function PadEater(fps) {
      this.fps = fps != null ? fps : 60;
      this.stream = [];
      this.maxKeyHistory = 50;
    }

    PadEater.prototype.getState = function() {
      return this.stream[0];
    };

    PadEater.prototype._poll = function() {
      var a, b, down, keystate, l1, l2, l_push, left, lx, ly, pad, pressed, r1, r2, r_push, right, rx, ry, select, siitake, start, up, x, y, _ref;
      pad = navigator.getGamepads().item();
      pressed = pad.buttons.map(function(b) {
        return b.pressed;
      });
      a = pressed[0], b = pressed[1], x = pressed[2], y = pressed[3], l1 = pressed[4], r1 = pressed[5], l2 = pressed[6], r2 = pressed[7], select = pressed[8], start = pressed[9], l_push = pressed[10], r_push = pressed[11], up = pressed[12], down = pressed[13], left = pressed[14], right = pressed[15], siitake = pressed[16];
      _ref = pad.axes, lx = _ref[0], ly = _ref[1], rx = _ref[2], ry = _ref[3];
      keystate = {
        pressed: {
          a: a,
          b: b,
          x: x,
          y: y,
          l1: l1,
          r1: r1,
          l2: l2,
          r2: r2,
          select: select,
          start: start,
          l_push: l_push,
          r_push: r_push,
          up: up,
          down: down,
          left: left,
          right: right,
          siitake: siitake
        },
        axes: {
          lx: lx,
          ly: ly,
          rx: rx,
          ry: ry
        },
        timestamp: pad.timestamp
      };
      this.stream.unshift(keystate);
      if (this.stream.length > this.maxKeyHistroy) {
        return this.stream.pop();
      }
    };

    PadEater.prototype.waitUntilPadActive = function(fn) {
      var wait;
      return (wait = (function(_this) {
        return function() {
          return setTimeout(function() {
            var pad, pads;
            pads = navigator.getGamepads();
            pad = pads[0] || (pad != null ? pad.item() : void 0);
            if (pad) {
              return fn();
            } else {
              return wait();
            }
          }, 300);
        };
      })(this))();
    };

    PadEater.prototype.start = function() {
      return this.waitUntilPadActive((function(_this) {
        return function() {
          var update;
          return (update = function() {
            return setTimeout(function() {
              _this._poll();
              return update();
            }, 1000 / _this.fps);
          })();
        };
      })(this));
    };

    return PadEater;

  })();

  module.exports = PadEater;

}).call(this);
